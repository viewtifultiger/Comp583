@page "/ScheduleAppointment"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject AppDbContext Db
@inject AppointmentService AppointmentService
@using BlazorApp.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Schedule Appointment</PageTitle>

<h1>Schedule Appointment</h1>

<!-- Patient Dropdown -->
<select @onchange="OnPatientChanged" class="form-control">
    <option value="">Select Patient</option>
    @foreach (var p in patients)
    {
        <option value="@p.Id">@p.FirstName @p.LastName</option>
    }
</select>
<br />

<!-- Auto-selected Hospital Display -->
<input class="form-control" value="@selectedHospitalName" disabled placeholder="Hospital will auto-fill" />
<br />

<!-- Doctor Dropdown -->
<select class="form-control" @onchange="OnDoctorChanged" value="@doctorId" disabled="@(!filteredDoctors.Any())">
    <option value="">Select Doctor</option>
    @foreach (var d in filteredDoctors)
    {
        <option value="@d.Id">@d.FirstName @d.LastName</option>
    }
</select>

<!-- Date Dropdown with InputDate component -->
<InputDate TValue="DateTime?" Value="date" ValueChanged="OnDateChanged" ValueExpression="() => date" class="form-control" Max="@MaxDate" Min="@MinDate" Disabled="@(!filteredDates.Any())" />

<!-- Time Dropdown -->
<select @bind="time" class="form-control" disabled="@(!filteredTimes.Any())">
    <option value="">Select Time</option>
    @foreach (var t in filteredTimes)
    {
        <option value="@t">@t</option>
    }
</select>
<br />

<button @onclick="ScheduleAppointment" disabled="@(!IsFormValid)" class="btn btn-primary">
    Schedule Appointment
</button>

@code {
    private int? patientId;
    private int? hospitalId;
    private int? doctorId;
    private DateTime? date;
    private string time = "";

    private string selectedHospitalName = "";

    private List<Patient> patients = new();
    private List<Doctor> filteredDoctors = new();
    private List<DateTime> filteredDates = new();
    private List<string> filteredTimes = new();

    // For InputDate component, to restrict date selection.
    private DateTime? MaxDate => filteredDates.Any() ? filteredDates.Max() : null;
    private DateTime? MinDate => filteredDates.Any() ? filteredDates.Min() : null;

    protected override async Task OnInitializedAsync()
    {
        patients = await Db.Patients.Include(p => p.Hospital).ToListAsync();
    }

    private async Task OnPatientChanged(ChangeEventArgs e)
    {
        patientId = int.TryParse(e.Value?.ToString(), out var id) ? id : null;

        var patient = patients.FirstOrDefault(p => p.Id == patientId);

        if (patient != null)
        {
            hospitalId = patient.HospitalId;
            selectedHospitalName = patient.Hospital?.Name ?? "Unknown";
            // Load doctors for this hospital
            filteredDoctors = await Db.Doctors
                .Where(d => d.HospitalId == hospitalId.Value)
                .ToListAsync();
        }
        else
        {
            hospitalId = null;
            selectedHospitalName = "";
            filteredDoctors.Clear();
        }

        doctorId = null;
        filteredDates.Clear();
        filteredTimes.Clear();
    }

    private async Task OnDoctorChanged(ChangeEventArgs e)
    {
        doctorId = int.TryParse(e.Value?.ToString(), out int id) ? id : null;

        if (doctorId.HasValue)
        {
            var availableTimes = await Db.Times
                .Where(t => t.DoctorId == doctorId.Value /* && t.IsAvailable */) // Uncomment if Time has IsAvailable
                .ToListAsync();

            filteredDates = availableTimes
                .Select(t => DateTime.TryParse(t.Date, out var d) ? d.Date : (DateTime?)null)
                .Where(d => d.HasValue)
                .Select(d => d.Value)
                .Distinct()
                .OrderBy(d => d)
                .ToList();
        }
        else
        {
            filteredDates.Clear();
        }

        date = null;
        filteredTimes.Clear();
        time = "";
    }


    private async Task OnDateChanged(DateTime? newDate)
    {
        date = newDate;

        if (doctorId.HasValue && date.HasValue)
        {
            var dateString = date.Value.ToString("yyyy-MM-dd");

            filteredTimes = await Db.Times
                .Where(t => t.DoctorId == doctorId.Value && t.Date == dateString)
                .Select(t => t.T.ToString()) 
                .Distinct()
                .OrderBy(t => t)
                .ToListAsync();
        }
        else
        {
            filteredTimes.Clear();
        }

        time = "";
    }



    private bool IsFormValid =>
        patientId.HasValue &&
        hospitalId.HasValue &&
        doctorId.HasValue &&
        date.HasValue &&
        !string.IsNullOrWhiteSpace(time);

    private async Task ScheduleAppointment()
{
    var newAppointment = new Appointment
    {
        PatientId = patientId.Value,
        HospitalId = hospitalId.Value,
        DoctorId = doctorId.Value,
        Date = date.Value.Date, // Only the date part
        time = time,            // Selected time from dropdown
    };

    Db.Appointments.Add(newAppointment);

    var availability = await Db.Availabilities
        .FirstOrDefaultAsync(a => a.DoctorId == doctorId && a.Date == date && a.TimeSlot == time);

    if (availability != null)
    {
        availability.IsAvailable = false;
    }

    await Db.SaveChangesAsync();
    NavigationManager.NavigateTo("/Appointments");
}

}





