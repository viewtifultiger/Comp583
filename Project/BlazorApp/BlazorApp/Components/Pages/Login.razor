@page "/login"
@using System.Security.Claims
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject IHttpContextAccessor HttpContextAccessor
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject AppDbContext DbContext

<h3>Login</h3>

@if (loginFailed)
{
    <p style="color:red;">Login failed. Please check your email and password.</p>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit" FormName="LoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText @bind-Value="loginModel.Username" Placeholder="Email" />
    <InputText @bind-Value="loginModel.Password" Placeholder="Password" type="password" />

    <button type="submit">Login</button>
</EditForm>
<button @onclick="Create_Account">Create Account</button>

@code {
    private LoginModel loginModel = new();
    private bool loginFailed = false;

    private async Task HandleValidSubmit()
    {
        var httpContext = HttpContextAccessor.HttpContext;

        // Try to log in as Doctor
        var doctor = await DbContext.Doctors
            .FirstOrDefaultAsync(d => d.Email == loginModel.Username);

        if (doctor != null && doctor.Password == loginModel.Password)
        {
            Console.WriteLine($"Doctor authenticated: {doctor.Email}");
            await SignInUser(doctor.Email, "Doctor");
            return;
        }
        else
        {
            Console.WriteLine($"Doctor login failed for: {loginModel.Username}");
        }

        // Try to log in as Patient
        var patient = await DbContext.Patients
            .FirstOrDefaultAsync(p => p.Email == loginModel.Username);

        if (patient != null && patient.Password == loginModel.Password)
        {
            Console.WriteLine($"Patient authenticated: {patient.Email}");
            await SignInUser(patient.Email, "Patient");
            return;
        }
        else
        {
            Console.WriteLine($"Patient login failed for: {loginModel.Username}");
        }

        // Try to log in as Admin
        var admin = await DbContext.Admins
            .FirstOrDefaultAsync(a => a.Email == loginModel.Username);

        if (admin != null && admin.Password == loginModel.Password)
        {
            Console.WriteLine($"Admin authenticated: {admin.Email}");
            await SignInUser(admin.Email, "Admin");
            return;
        }
        else
        {
            Console.WriteLine($"Admin login failed for: {loginModel.Username}");
        }

        // If no match found
        loginFailed = true;
        Console.WriteLine($"Login failed for: {loginModel.Username}");
    }

    private async Task SignInUser(string email, string role)
{
    var claims = new List<Claim>
    {
        new Claim(ClaimTypes.Name, email),
        new Claim(ClaimTypes.Role, role)
    };

    var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
    var principal = new ClaimsPrincipal(identity);

    // Set authentication properties
    var properties = new AuthenticationProperties
    {
        IsPersistent = true, // Persist cookies
        ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(30) // Set cookie expiration time
    };

    // Sign in the user
    //await HttpContextAccessor.HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal, properties);

    // After login, redirect to a secured page (e.g., dashboard)
    //Navigation.NavigateTo("/Home", forceLoad: true);
}


    private void Create_Account()
    {
        Navigation.NavigateTo("/AccountCreation", forceLoad: true);
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}





