@page "/AccountCreation"
@inject NavigationManager NavigationManager
@inject AppDbContext DbContext
@inject IHttpContextAccessor HttpContextAccessor
@using BlazorApp.Models
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<h3>Create your account</h3>

<input @bind="FirstName" placeholder="First Name" />
<br />
<input @bind="LastName" placeholder="Last Name" />
<br />
<input @bind="age" type="number" placeholder="0" />
<br />
<input @bind="email" placeholder="Email" />
<br />
<input @bind="password" type="password" placeholder="Password" />
<br />

<select @bind="type">
    <option value="">Select Account Type</option>
    @foreach (var t in types)
    {
        <option value="@t">@t</option>
    }
</select>
<br />

<select @bind="SelectedHospitalId">
    <option value="">Select Hospital</option>
    @foreach (var h in Hospitals)
    {
        <option value="@h.Id">@h.Name</option>
    }
</select>
@if (type == "Doctor")
{
    <h4>Set Available Times</h4>
    
    <InputDate @bind-Value="SelectedDate" />
    <br />
    <input @bind="TimeSlot" type="number" placeholder="Time (e.g., 900 for 9 AM)" />
    <br />
    <button @onclick="AddTimeSlot">Add Time</button>

    <ul>
        @foreach (var time in DoctorTimes)
        {
            <li>@time.Date at @time.T</li>
        }
    </ul>
}
<button @onclick="CreateAccount">Create Account</button>


@code {
    private string FirstName = "";
    private string LastName = "";
    private int age = 0;
    private string email = "";
    private string password = "";
    private string type = "";
    private int? SelectedHospitalId = null;

    private List<string> types = new() { "Patient", "Doctor", "Admin" };
    private List<Hospital> Hospitals = new();

    protected override async Task OnInitializedAsync()
    {
        Hospitals = await DbContext.Hospitals.ToListAsync();
    }
    private DateTime SelectedDate = DateTime.Today;
    private int TimeSlot; 
    private List<Time> DoctorTimes = new();

    private void AddTimeSlot()
    {
        var formattedDate = SelectedDate.ToString("yyyy-MM-dd");
        DoctorTimes.Add(new Time
        {
            Date = formattedDate,
            T = TimeSlot
        });
    }
    private async Task CreateAccount()
{
    if (SelectedHospitalId is null || string.IsNullOrWhiteSpace(type))
    {
        
        return;
    }

    if (type == "Doctor")
    {
        var doctor = new Doctor
        {
            FirstName = FirstName,
            LastName = LastName,
            Email = email,
            Password = password,
            Age = age,
            HospitalId = SelectedHospitalId.Value,
            Times = DoctorTimes.ToList()
        };

        DbContext.Doctors.Add(doctor);
    }
    else if (type == "Patient")
    {
        var patient = new Patient
        {
            FirstName = FirstName,
            LastName = LastName,
            Email = email,
            Password = password, 
            Age = age,
            HospitalId = SelectedHospitalId.Value
        };

        DbContext.Patients.Add(patient);
    }
    else if (type == "Admin")
    {
        var admin = new Admin
        {
            FirstName = FirstName,
            LastName = LastName,
            Email = email,
            Password = password, 
            Age = age,
            HospitalId = SelectedHospitalId.Value
        };

        DbContext.Admins.Add(admin);
    }

    await DbContext.SaveChangesAsync();
    NavigationManager.NavigateTo("/Login"); 
}


    
}
